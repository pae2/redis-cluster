global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  redis:
    password: ""


nameOverride: ""
fullnameOverride: ""
clusterDomain: cluster.local
commonAnnotations: {}
commonLabels: {}
extraDeploy: []

diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

image:
  registry: docker.io
  repository: pae2/redis-cluster
  tag: 7.2.1-ubi8-minimal
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false
networkPolicy:
  enabled: false
  allowExternal: true
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}

serviceAccount:
  create: false
  name: ""
  annotations: {}
  automountServiceAccountToken: false

rbac:
  create: false
  role:
    rules: []
podSecurityContext:
  enabled: false
  fsGroup: 1001
  runAsUser: 1001
  sysctls: []
podDisruptionBudget: {}
minAvailable: ""
maxUnavailable: ""
containerSecurityContext:
  enabled: false
  runAsUser: 1001
  runAsNonRoot: true
usePassword: true
password: ""
existingSecret: ""
existingSecretPasswordKey: ""
usePasswordFile: false
tls:
  enabled: false
  authClients: true
  autoGenerated: false
  existingSecret: ""
  certificatesSecret: ""
  certFilename: ""
  certKeyFilename: ""
  certCAFilename: ""
  dhParamsFilename: ""
service:
  ports:
    redis: 6379
  nodePorts:
    redis: ""
  extraPorts: []
  annotations: {}
  labels: 
    app: redis-cluster
    stand: uat4
  type: ClusterIP
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  sessionAffinity: None
  sessionAffinityConfig: {}
  headless:
    annotations: {}
persistence:
  enabled: true
  path: /bitnami/redis/data
  subPath: ""
  storageClass: ""
  annotations: {}
  accessModes:
    - ReadWriteOnce
  size: 1Gi
  matchLabels: {}
  matchExpressions: {}

persistentVolumeClaimRetentionPolicy:
  enabled: false
  whenScaled: Retain
  whenDeleted: Retain

volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 11-debian-11-r60
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  containerSecurityContext:
    enabled: true
    runAsUser: 0
    privileged: false
  resources:
    limits: {}
    requests: {}
podSecurityPolicy:
  create: false


redis:
  command: []
  args: []
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0

  podManagementPolicy: Parallel
  hostAliases: []
  hostNetwork: false
  useAOFPersistence: "yes"
  containerPorts:
    redis: 6379
    bus: 16379
  lifecycleHooks: {}
  extraVolumes: []
  extraVolumeMounts: []
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  podLabels:
    app: redis-cluster
  priorityClassName: ""
  defaultConfigOverride: ""
  configmap: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  podAnnotations: {}
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  schedulerName: ""
  shareProcessNamespace: false
  livenessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 5
  startupProbe:
    enabled: false
    path: /
    initialDelaySeconds: 300
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []


updateJob:
  activeDeadlineSeconds: 600
  command: []
  args: []
  hostAliases: []
  annotations: {}
  podAnnotations: {}
  podLabels:
    app: redis-cluster
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  initContainers: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  priorityClassName: ""
  resources:
    limits: {}
    requests: {}


cluster:
  init: true
  nodes: 6
  replicas: 1
  externalAccess:
    enabled: false
    hostMode: false
    service:
      type: LoadBalancer
      port: 6379
      loadBalancerIP: []
      loadBalancerSourceRanges: []
      annotations: {}
  update:
    addNodes: false
    currentNumberOfNodes: 6
    currentNumberOfReplicas: 1
    newExternalIPs: []


metrics:
  enabled: true
  image:
    registry: docker.io
    repository: pae2/redis-exporter
    tag: 1.54.0-ubi8-minimal
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 10m
      memory: 64Mi
  extraArgs: {}
  extraEnvVars: []
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
  podLabels:
    app: redis-cluster
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
  serviceMonitor:
    enabled: true
    namespace: ""
    interval: ""
    scrapeTimeout: ""
    selector:
      app: redis-cluster
    labels: {}
    annotations: {}
    jobLabel: ""
    relabelings: []
    metricRelabelings: []
  prometheusRule:
    enabled: false
    additionalLabels: {}
    namespace: ""
    rules: []
  priorityClassName: ""
  service:
    type: ClusterIP
    clusterIP: ""
    loadBalancerIP: ""
    annotations: {}
    labels:
      app: redis-cluster


sysctlImage:
  enabled: false
  command: []
  registry: docker.io
  repository: bitnami/os-shell
  tag: 11-debian-11-r60
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
  mountHostSys: false
  containerSecurityContext:
    enabled: true
    runAsUser: 0
    privileged: true
  resources:
    limits: {}
    requests: {}


# helm upgrade --install --atomic redis-cluster ./redis-cluster --values=./redis-cluster/values-test.yaml --timeout 120s -n <ns> --set env.REDIS_PASSWORD=<pass> --dry-run